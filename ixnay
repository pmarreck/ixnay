#!/usr/bin/env bash

##########################
# IXNAY: A Saner Nix TUI #
##########################

# graceful dependency enforcement
# Usage: needs <executable> [provided by <packagename> or explain how to get it here]
needs() {
  local bin=$1
  shift
  command -v $bin >/dev/null 2>&1 || { echo >&2 "I require $bin but it's not installed or in PATH; $*"; return 1; }
}

# ANSI coloring
# Color constants
export ANSI="\033["
export TXTRED='0;31m' # Red
export TXTYLW='0;33m' # Yellow
export TXTGRN='0;32m' # Green
export TXTRST='0m'    # Text Reset, disable coloring
echo_yellow() {
  echo -e "${ANSI}${TXTYLW}${1}${ANSI}${TXTRST}"
}

# Nix has a terrible UI/UX, so...
# Note: May need to run as sudo for some ops. See note below.

_ixnay_help() {
  cat << EOF
Are you a Nix noob?
I have a possible solution! IXNAY! A sane wrapper for nix-shell and friends, etc.

Configuration:
      Set IXNAY_MUTE_CMD_ECHO env variable to stop ixnay from printing out the underlying command it will run before it runs it.

Usage:
      ixnay channels
      -- Lists nix channels. Lists global channels if sudo'd in a multiuser setup.

      ixnay add-channel | add <channelname> <url>
      -- Adds channel <channelname> via <url>.

      ixnay remove-channel | remove <channelname>
      -- Removes channel <channelname>.

      ixnay sync <channelname>
      -- Does a channel update from the Internet, or leave blank for all channels.

      ixnay reify | realize [no-upgrade | no-update | no-up | --no-up | --no-upgrade | --no-update | here]
      -- Reads the config files, sets up the new config, switches to the new config,
         optionally doesn't update from the Internet.

      ixnay see <packagename> [run [<execname> [<args>]]]
      -- Downloads <packagename>, makes it available in a new shell, optionally runs it
         while either assuming the executable has the same name as the packagename
         or using a different executable name, with optional arguments passed to it.
         Fun example: ixnay see sl run

      ixnay install | i [<channelname>.]<packagename>
      -- Imperatively installs a package into your profile.
         If no channel name is specified, use the defaults.
         Note: This is not a recommended use of Nix because it is not declarative,
         but it works for people new to Nix who are used to thinking in this way,
         and it will be preserved from being garbage-collected (but you will lose it
         if your system dies and you neither have a backup nor have it declaratively
         named in a configuration file you source-control... which is why the latter
         is recommended!)

      ixnay uninstall | u <packagename>
      -- Imperatively uninstalls a package from your profile.
         See the caveats/suggestions above for "ixnay install".

      ixnay update | upgrade | u
      -- Updates the channels and upgrades any installed packages.

      ixnay rollback | rb
      -- Undoes the last store change.

      ixnay list | l [<filter>]
      -- List packages that are locally-installed in your profile, optionally with a filter.

      ixnay locate | find | f <package-name>
      -- Locate an available package named <package-name>. It will return any names and versions
         across all channels, or suggest possibilities if spelled wrong or incomplete.

      ixnay search | s | query | q <pattern>
      -- Searches all available packages, and their descriptions, in nixpkgs (downloading its DB first,
         if necessary) for a pattern, which may be a regex. Multiple patterns are AND'ed.

      ixnay optimize | optimise
      -- Replaces any duplicate files in the Nix store with hardlinks, saving space.
         Note that you can set this up to be done on the fly via a config file option.

      ixnay clean | c | gc | garbage-collect | collect-garbage | purge
      -- Delete all unreachable paths in the Nix store (anything that nothing active
         is currently referencing), freeing up space.

      ixnay validate | valid | check | verify
      -- Validates the current contents of the Nix store.

      ixnay repair | doc | doctor
      -- Validates AND repairs the current contents of the Nix store.

      ixnay <anything else not recognized, or nothing>
      -- Prints out the help you see here!
EOF
}

ixnay() {
  local NIX_COMMAND=${NIX_COMMAND:-nix-env}
  case $NIX_COMMAND in
    nix-env)
      needs nix-env it comes as part of nix
      needs nix-channel it comes as part of nix
      needs nix-store it comes as part of nix
      needs nix it comes as part of nix
      ;;
  esac
  case $1 in
    channels)
      nix-channel --list
      ;;
    add-channel | add)
      shift;
      nix-channel --add "$2" "$1"
      ;;
    remove-channel | remove)
      shift;
      nix-channel --remove "$1"
      ;;
    sync)
      shift;
      nix-channel --update "$1"
      ;;
    reify | realize | apply)
      shift;
      case $1 in
        no-upgrade | no-update | no-up | --no-up | --no-upgrade | --no-update | here)
          [ "$IXNAY_MUTE_CMD_ECHO" ] || echo_yellow "sudo nixos-rebuild switch"
          sudo nixos-rebuild switch
          ;;
        *)
          [ "$IXNAY_MUTE_CMD_ECHO" ] || echo_yellow "sudo nixos-rebuild switch --upgrade"
          sudo nixos-rebuild switch --upgrade
          ;;
      esac
      ;;
    # 'see' usage examples:
    # ixnay see mop run # downloads, installs and runs mop. assumes package & executable name are identical
    # ixnay see mop # downloads and installs mop and makes it available in a new shell it drops you into
    # ixnay see mop run mopper <args> # downloads & installs mop package, but runs it with a different name and args
    see)
      shift;
      case $2 in
        run)
          case $3 in
            "")
              [ "$IXNAY_MUTE_CMD_ECHO" ] || echo_yellow "nix-shell -p $1 --run $1"
              nix-shell -p $1 --run $1
              ;;
            *)
              local app="$1"
              shift; shift;
              [ "$IXNAY_MUTE_CMD_ECHO" ] || echo_yellow "nix-shell -p $app --run \"$*\""
              nix-shell -p $app --run "$*"
              ;;
          esac
          ;;
        *)
          [ "$IXNAY_MUTE_CMD_ECHO" ] || echo_yellow "nix-shell -p $1"
          nix-shell -p $1
          ;;
      esac
      ;;
    install | i)
      echo_yellow "Note: It is recommended to add a package to your global 'packages' config declaratively,"
      echo_yellow "instead of installing it into your profile."
      case $2 in
        *)
          shift;
          IFS="." read -r chan pack <<< "$1"
          # if the string is blank
          if [ -z "$pack" ]; then
            # no channel specified; use default
            pack="$chan"
            [ "$IXNAY_MUTE_CMD_ECHO" ] || echo_yellow "$NIX_COMMAND -i $pack"
            $NIX_COMMAND -i $pack
          else
            [ "$IXNAY_MUTE_CMD_ECHO" ] || echo_yellow "$NIX_COMMAND -iA ${chan}:${pack}"
            $NIX_COMMAND -iA ${chan}:${pack}
          fi
          ;;
      esac
      ;;
    uninstall | u)
      case $2 in
        *)
          shift;
          [ "$IXNAY_MUTE_CMD_ECHO" ] || echo_yellow "$NIX_COMMAND -e $*"
          $NIX_COMMAND -e $*
          ;;
      esac
      ;;
    update | upgrade | u)
      shift;
      [ "$IXNAY_MUTE_CMD_ECHO" ] || echo_yellow "nix-channel --update; $NIX_COMMAND --upgrade $*"
      nix-channel --update; $NIX_COMMAND --upgrade $*
      ;;
    rollback | rb)
      [ "$IXNAY_MUTE_CMD_ECHO" ] || echo_yellow "$NIX_COMMAND --rollback"
      $NIX_COMMAND --rollback
      ;;
    list | l) # local explicitly installed packages
      shift;
      searchterm=${1:-\*}
      [ "$IXNAY_MUTE_CMD_ECHO" ] || echo_yellow "$NIX_COMMAND --query \"$searchterm\""
      shift;
      $NIX_COMMAND --query "$searchterm"
      ;;
    locate | find | f)
      shift;
      [ "$IXNAY_MUTE_CMD_ECHO" ] || echo_yellow "nix-env -qaP $*"
      nix-env -qaP $*
      ;;
    search | s | query | q | find | f) # can be a regexp! Multiple clauses are AND'ed.
      shift;
      [ "$IXNAY_MUTE_CMD_ECHO" ] || echo_yellow "nix search nixpkgs $*"
      nix search nixpkgs $*
      ;;
    optimize | optimise)
      [ "$IXNAY_MUTE_CMD_ECHO" ] || echo_yellow "nix store optimise"
      nix store optimise
      ;;
    clean | c | gc | garbage-collect | collect-garbage | purge)
      [ "$IXNAY_MUTE_CMD_ECHO" ] || echo_yellow "nix-collect-garbage"
      nix-collect-garbage
      ;;
    validate | valid | check | verify)
      shift;
      [ "$IXNAY_MUTE_CMD_ECHO" ] || echo_yellow "nix-store --verify --check-contents"
      nix-store --verify --check-contents
      ;;
    repair | doc | doctor)
      shift;
      [ "$IXNAY_MUTE_CMD_ECHO" ] || echo_yellow "nix-store --verify --check-contents --repair"
      nix-store --verify --check-contents --repair
      ;;
    *)
      _ixnay_help
      ;;
  esac
}

# run the function, passing along any args, if this file was run directly (such as via sudo) instead of as an include
# sometimes, $0 contains a leading dash to indicate an interactive (or is it login?) shell,
# which is apparently an old convention (which also broke the basename call on OS X)
me=$(basename ${0##\-})
if [ "$me" = "ixnay" ]; then
  ixnay $*
fi
